/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'shibadog' at '16/07/16 10:29' with Gradle 2.14
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE")
        classpath('com.github.ksoichiro:gradle-web-resource-plugin:1.7.0')
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.github.ksoichiro.web.resource'

apply plugin: 'application'

jar {
	baseName = 'FileDownloadTool'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "jp.shibadog.fdt.FDTApplication"

eclipse {
	classpath {
		containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
	}

	project {
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		natures 'org.eclipse.buildship.core.gradleprojectnature'
	}
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
//    compile("org.springframework.boot:spring-boot-devtools")
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')

    compile("com.h2database:h2")
	// https://mvnrepository.com/artifact/org.hibernate/hibernate-core
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.1.Final'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

// web resources setting ***************************************
webResource {
    base {
        // Change base directories for src/dest
        src = 'src/main'
        dest = 'src/main/resources/static'

        // You can omit '=' like this:
        // src 'src/main'
        // dest 'src/main/resources/static'
    }

    testBase {
        // Change base directories
        src = 'src/test'
    }

    lib {
        // Change directories for libraries downloaded with bower
        dest = 'lib'
    }

    bower {
        dependencies {
            // 'filter' filters files like main-bower-files
            install name: 'jquery', version: '1.11.2', filter: ['dist/*.min.*']
            install name: 'bootstrap', version: '3.3.4', filter: ['dist/css/*.min.css', 'dist/js/*.min.js', 'dist/fonts/*']

            // You can set your favorite name to 'outputName'.
            // e.g.
            //   build/webResource/bower_components/components-font-awesome
            // will be copied to
            //   build/webResource/outputs/lib/font-awesome
            //install name: 'components-font-awesome', version: '4.3.0', outputName: 'font-awesome'

            // If there is a conflict, you can resolve it by using "resolve"
            //resolve name: 'jquery', version: '1.9.0'
        }

        // Set this option to true if you want to copy
        // all dependencies in build/webResource/bower_components directory
        // to lib.dest directory.
        // This is useful when your dependencies have transitive dependencies.
        // However this option can cause problems that old dependencies
        // are unintentionally copied, so it is false by default.
        copyAll true

        // Giving --force-latest option also work for resolving conflict
        //options = ["--force-latest"]

        // You can make bower installation serial, but be careful.
        // (See "Parallel installation for bower" section for details.) 
        //parallelize false
    }
}

compileJava.dependsOn 'webResourceCompile';

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
